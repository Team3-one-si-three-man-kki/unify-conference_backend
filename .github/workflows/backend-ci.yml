name: Backend CI/CD

on:
  push:
    branches: ["main"]
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SPRING_PROFILES_ACTIVE: dev
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
      KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
      KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

  docker-build-push:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,prefix=

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to Server
    needs: docker-build-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to target server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # GHCR에 로그인합니다. DOCKER_PASSWORD는 read:packages 권한이 있는 PAT를 사용하세요.
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # 이전 Job에서 전달받은 이미지 태그로 이미지를 pull 합니다.
            # 이미지 태그에 레지스트리 주소(ghcr.io/...)가 포함되어 있습니다.
            docker pull ${{ needs.docker-build-push.outputs.image_tag }}

            # 기존 컨테이너가 있다면 중지하고 삭제합니다. (없어도 오류가 발생하지 않습니다)
            docker stop unify-backend || true
            docker rm unify-backend || true

            # 새로운 컨테이너를 실행합니다.
            # 각 줄의 끝에 '\'를 추가하여 하나의 명령어로 인식시킵니다.
            docker run -d --name unify-backend -p ${{ secrets.SERVER_PORT }}:${{ secrets.SERVER_PORT }} \
              -e SPRING_PROFILES_ACTIVE=dev \
              -e SERVER_PORT=${{ secrets.SERVER_PORT }} \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -e KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} \
              -e KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }} \
              -e KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }} \
              ${{ needs.docker-build-push.outputs.image_tag }}
